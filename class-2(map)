1)There is a broken calculator that has the integer startValue on its display initially. In one operation, you can:

multiply the number on display by 2, or
subtract 1 from the number on display.
Given two integers startValue and target, return the minimum number of operations needed to display target on the calculator.

Example 1:
Input: startValue = 2, target = 3
Output: 2
Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}.
program---------------------
class Solution {
public:
    int brokenCalc(int startValue, int target) {
        int op=0;
        while(startValue<target){
            if(target%2==0)
            {
                target/=2;
                op++;
            }
            else
            {
                target+=1;
                op++;
            }
        }
        return(op+(startValue-target));
    }
};
-----------------------------maps---------------------------------------------------------------
2)#include<bits/stdc++.h>
using namespace std;
int main()
{
	unordered_map<int,int>mpp; //printing with out sorted order
	int arr[10]={1,2,1,3,4,3,1,6,7,9};
	for(int i=0;i<10;i++)
		mpp[arr[i]]++;
	for(auto it:mpp){
		cout<<it.first<<" "<<it.second<<"\n";
	}
}
output:
9 1
7 1
6 1
1 3
2 1
3 2
4 1
------------------------------------------------
