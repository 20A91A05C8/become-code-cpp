1)There is a broken calculator that has the integer startValue on its display initially. In one operation, you can:

multiply the number on display by 2, or
subtract 1 from the number on display.
Given two integers startValue and target, return the minimum number of operations needed to display target on the calculator.

Example 1:
Input: startValue = 2, target = 3
Output: 2
Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}.
program---------------------
class Solution {
public:
    int brokenCalc(int startValue, int target) {
        int op=0;
        while(startValue<target){
            if(target%2==0)
            {
                target/=2;
                op++;
            }
            else
            {
                target+=1;
                op++;
            }
        }
        return(op+(startValue-target));
    }
};
-----------------------------maps---------------------------------------------------------------
2)#include<bits/stdc++.h>
using namespace std;
int main()
{
	unordered_map<int,int>mpp; //printing with out sorted order
	int arr[10]={1,2,1,3,4,3,1,6,7,9};
	for(int i=0;i<10;i++)
		mpp[arr[i]]++;
	for(auto it:mpp){
		cout<<it.first<<" "<<it.second<<"\n";
	}
}
output:
9 1
7 1
6 1
1 3
2 1
3 2
4 1
-----------------first appearence in an arry-------------------------------
#include<bits/stdc++.h>
using namespace std;
int drinker(int arr[],int t,int n){
	int left=0,right=n-1;
	while(left<=right)
	{
		int mid=(left+right)>>1;
		if(arr[mid]>=t){
			right=mid-1;
		}
		else
			left=mid+1;
	}
	return left;
}
int main()
{
	int n=9;
	int arr[n]={1,2,3,4,4,4,5,6,7};
	int pos;
	for(int i=0;i<n;i++)
		cout<<arr[i]<<" ";
	cout<<endl<<"first 4 is in position:";
	pos=drinker(arr,4,9);
	cout<<pos;

}
output:
1 2 3 4 4 4 5 6 7 
first 4 is in position:3
-------builtin funtions for the above code---------
int index=lower_bound(arr,arr+n,4)-arr;//builtin function for whole program
int index1=lower_bound(ve.begin(),ve.end(),t)-ve.begin();//built in function for vectors
int index2=upper_bound(arr,arr+n,4)-arr-1;//for upper bound
cout<<endl<<index<<" "<<index2;
output:
3 5
